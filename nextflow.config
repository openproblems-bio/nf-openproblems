/*
 * -------------------------------------------------
 *  nf-core/openproblems Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Workflow flags
  outdir = './results'
  publish_dir_mode = 'copy'

  // If specified, use smaller dataset
  use_test_data = false

  // Set the Docker host to DockerHub
  container_host = 'singlecellopenproblems/'

  // Boilerplate options
  name = false
  monochrome_logs = false
  help = false
  tracedir = "${params.outdir}/pipeline_info"
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false

  max_memory = 128.GB
  max_cpus = 16
  max_time = 24.h
  max_retries = 7

  method_cpus = 2
  metric_cpus = 2
  method_max_cpus = 32
  metric_max_cpus = 32
  dataset_memory = 2.GB
  method_memory = 16.GB
  metric_memory = 4.GB
  method_time = 30.min
  metric_time = 30.min
  method_max_time = 24.h
  metric_max_time = 24.h
}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'singlecellopenproblems/openproblems:latest'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
  aws { includeConfig 'conf/aws.config' }
  conda { process.conda = "$projectDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behavior as new default.
    docker.runOptions = '-u \$(id -u):\$(id -g) -e "NUMBA_CACHE_DIR=~/numba-cache"'
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
  }
  podman {
    podman.enabled = true
  }
  test { includeConfig 'conf/test.config' }
}


// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
  overwrite = true
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
  overwrite = true
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
  overwrite = true
}
dag {
  enabled = false
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'openproblems-bio/openproblems'
  author = 'Olga Botvinnik, Scott Gigante'
  homePage = 'https://github.com/openproblems-bio/openproblems'
  description = 'Framework for testing and benchmarking single-cell open problems tools'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.04.0'
  version = '1.3'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

task_resources = [:]
task_resources['memory'] = [:]
task_resources['cpus'] = [:]
task_resources['time'] = [:]

def compute_resources(min, task, type, max = null) {
  if (task.attempt == 1) {
    out = min
  } else {
    is_oom = task.exitStatus in 135..139
    current = task_resources[type][task.name]
    if (type == 'memory')  {
      // sometimes OOM returns exit code 1
      is_oom = is_oom || task.attempt > 2
      out = is_oom ? current * 4 : current
    } else {
      out = is_oom ? current : max
    }
  }
  out = check_max(out, type)
  task_resources[type][task.name] = out
  return out
}